Parameters:
  # Paramenters are entirely optional.
  # but using them will make your cloudformation templates more reusable
  # use them for things that may change over time, such as instance type,
  # VPCs and so on.

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  VpcCIDR: 
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.1.0/24    
    
  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.3.0/24

Resources:
  # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access

  ProjectVPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags: 
        - Key: Name 
          Value: !Ref EnvironmentName

  ProjectInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  ProjectInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref ProjectInternetGateway
      VpcId: !Ref ProjectVPC

  ProjectPublicSubnet1: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProjectVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  ProjectPublicSubnet2: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProjectVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name 
        Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  ProjectPrivateSubnet1: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProjectVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  ProjectPrivateSubnet2: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProjectVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  ProjectNatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: ProjectInternetGatewayAttachment
    Properties: 
      Domain: vpc

  ProjectNatGateway1: 
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt ProjectNatGateway1EIP.AllocationId
      SubnetId: !Ref ProjectPublicSubnet1

  ProjectNatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: ProjectInternetGatewayAttachment
    Properties:
      Domain: vpc

  ProjectNatGateway2: 
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ProjectNatGateway2EIP.AllocationId
      SubnetId: !Ref ProjectPublicSubnet2

  ProjectPublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref ProjectVPC
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Public Routes

  ProjectPublicRoute1: 
    Type: AWS::EC2::Route
    DependsOn: ProjectInternetGatewayAttachment
    Properties: 
      RouteTableId: !Ref ProjectPublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ProjectInternetGateway

  ProjectPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProjectPublicRouteTable1
      SubnetId: !Ref ProjectPublicSubnet1

  ProjectPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProjectPublicRouteTable1
      SubnetId: !Ref ProjectPublicSubnet2

  ProjectPrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref ProjectVPC
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  ProjectPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ProjectPrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref ProjectNatGateway1

  ProjectPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProjectPrivateRouteTable1
      SubnetId: !Ref ProjectPrivateSubnet1

  ProjectPrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref ProjectVPC
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  ProjectPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ProjectPrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref ProjectNatGateway2

  ProjectPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProjectPrivateRouteTable2
      SubnetId: !Ref ProjectPrivateSubnet2                
                                                      
  ProjectALBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our application load balancer
      VpcId: !Ref ProjectVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  ProjectInstancesSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our Instances
      VpcId: !Ref ProjectVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId:
          Fn::GetAtt:
          - ProjectALBSecGroup
          - GroupId
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0      

  UdacityS3ReadOnlyEC2:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess             

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref UdacityS3ReadOnlyEC2

  ProjectWebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "Udacity Demo Web Server Up and Running!" > index.html
      ImageId: ami-0747bdcabd34c712a
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      SecurityGroups:
      - Ref: ProjectInstancesSecGroup
      InstanceType: t3.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

  ProjectWebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref ProjectVPC        

  ProjectWebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Ref: ProjectPrivateSubnet1 
      - Ref: ProjectPrivateSubnet2
      LaunchConfigurationName: !Ref ProjectWebAppLaunchConfig
      MinSize: 4
      MaxSize: 6
      TargetGroupARNs:
      - Ref: ProjectWebAppTargetGroup         

  ProjectWebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Ref: ProjectPublicSubnet1
      - Ref: ProjectPublicSubnet2
      SecurityGroups:
      - Ref: ProjectALBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: ProjectWebAppTargetGroup
      LoadBalancerArn:
        Ref: ProjectWebAppLB
      Port: 80
      Protocol: HTTP    

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref ProjectWebAppTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1                

Outputs: 
  # This is also optional.
  # Bonus points for useful outputs!
  # for example, if you create a Load Balancer
  # it's nice to output the URL to it here, so that we don't have to go to the console to get it.

  VPC: 
    Description: A reference to the created VPC
    Value: !Ref ProjectVPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCID

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref ProjectPublicSubnet1, !Ref ProjectPublicSubnet2 ]]
    Export:
      Name: !Sub ${EnvironmentName}-PUB-NETS

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref ProjectPrivateSubnet1, !Ref ProjectPrivateSubnet2 ]]
    Export:
      Name: !Sub ${EnvironmentName}-PRIV-NETS

  ProjectPublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref ProjectPublicSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PUB1-SN

  ProjectPublicSubnet2: 
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref ProjectPublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PUB2-SN

  ProjectPrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref ProjectPrivateSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PRI1-SN

  ProjectPrivateSubnet2: 
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref ProjectPrivateSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PRI2-SN

  ProjectWebAppLB: 
    Description: The DNSName of the backup load balancer
    Value: !Join [ "", [ "http://", !GetAtt ProjectWebAppLB.DNSName ]]
    Export:
      Name: !Sub ${EnvironmentName}-AppLB-DNS 
    
                            